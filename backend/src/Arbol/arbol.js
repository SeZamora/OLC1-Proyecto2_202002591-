/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var arbol = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[2,5,33,40,42,46,51,58,61,62,63],$Vb=[1,26],$Vc=[1,34],$Vd=[1,52],$Ve=[1,57],$Vf=[1,59],$Vg=[1,53],$Vh=[1,54],$Vi=[1,55],$Vj=[1,56],$Vk=[1,58],$Vl=[1,33],$Vm=[1,35],$Vn=[1,36],$Vo=[1,37],$Vp=[1,38],$Vq=[1,39],$Vr=[1,40],$Vs=[1,41],$Vt=[1,42],$Vu=[1,86],$Vv=[1,87],$Vw=[1,88],$Vx=[1,89],$Vy=[1,97],$Vz=[1,90],$VA=[1,91],$VB=[1,92],$VC=[1,93],$VD=[1,94],$VE=[1,95],$VF=[1,96],$VG=[1,98],$VH=[1,106],$VI=[1,114],$VJ=[1,111],$VK=[1,109],$VL=[1,110],$VM=[1,112],$VN=[1,113],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[1,118],$VS=[1,119],$VT=[1,120],$VU=[1,121],$VV=[35,53,54,57],$VW=[1,123],$VX=[16,23,25,26,27,28,29,32,35,36,37,54,55,57,61,63,65,79,80,84,87,88,95,102,104,106,108,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130],$VY=[2,140],$VZ=[1,126],$V_=[1,127],$V$=[2,18,31,33,35,40,42,46,51,58,61,62,65,78,80,81,85,86,89,90,97,100],$V01=[1,152],$V11=[1,151],$V21=[2,5,18,31,33,35,40,42,46,51,58,61,62,63,65,78,80,81,85,86,89,90,97,100],$V31=[16,35,36,37,61,95,102,104,106,108,111,113,123,124,125,126,127,128,129,130],$V41=[1,201],$V51=[1,202],$V61=[1,203],$V71=[1,204],$V81=[1,205],$V91=[65,80,84],$Va1=[1,228],$Vb1=[16,23,25,26,27,28,29,32,35,36,37,54,55,61,63,65,79,80,84,87,88,95,102,104,106,108,111,112,113,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130],$Vc1=[16,23,25,26,27,28,29,32,35,36,37,54,55,61,63,65,79,80,84,87,88,95,102,104,106,108,111,116,121,122,123,124,125,126,127,128,129,130],$Vd1=[2,124],$Ve1=[16,23,25,26,27,28,29,32,35,36,37,54,55,61,63,65,79,80,84,87,88,95,102,104,106,108,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130],$Vf1=[35,36,37,55,61,95,102,104,106,108,111,113,123,124,125,126,127,128,129,130],$Vg1=[16,23,24,35,36,37,54,61,63,95,102,104,106,108,111,113,123,124,125,126,127,128,129,130],$Vh1=[35,36,37,61,95,102,104,106,108,111,113,123,124,125,126,127,128,129,130],$Vi1=[1,282],$Vj1=[23,37,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"CREATETABLE":7,"ALTERTABLE":8,"DROPTABLE":9,"INSERT":10,"SELECT":11,"UPDATE":12,"TRUNCATE":13,"DELETE":14,"BEGINEND":15,"puntocoma":16,"DVARIABLES":17,"tdeclare":18,"LIDS":19,"IDS":20,"EXP":21,"TIPO":22,"coma":23,"tdefault":24,"tinteger":25,"tboolean":26,"tdate":27,"tdouble":28,"tvarchar":29,"ASIGNARV":30,"tset":31,"igual":32,"tcreate":33,"ttable":34,"idt":35,"parena":36,"parenc":37,"LCOLUMNAS":38,"COLUMNAS":39,"talter":40,"tadd":41,"tdrop":42,"tcolumn":43,"trename":44,"tto":45,"tinsert":46,"tinto":47,"LCOLUM":48,"tvalues":49,"IDINSERT":50,"tselect":51,"LID":52,"tfrom":53,"tas":54,"twhere":55,"SCOL":56,"multi":57,"tupdate":58,"LUPDATE":59,"SUPDATE":60,"ttruncate":61,"tdelete":62,"tbegin":63,"INSTRUCCIONES":64,"tend":65,"INSTRUCCION":66,"IF":67,"CASE":68,"WHILE":69,"FOR":70,"BREAK":71,"CONTINUE":72,"RETURN":73,"FUNCION":74,"METODO":75,"LLAMADA":76,"PRINT":77,"tif":78,"tthen":79,"telse":80,"tcase":81,"INSTRUCASE":82,"INTCASE":83,"twhen":84,"twhile":85,"tfor":86,"tin":87,"punto":88,"tbreak":89,"tcontinue":90,"tfunction":91,"PARAMETOS":92,"treturns":93,"CAST":94,"tcast":95,"PARAMETRO":96,"treturn":97,"tmetodo":98,"LLAMADAS":99,"tprint":100,"LOWER":101,"tlower":102,"UPPER":103,"tupper":104,"ROUND":105,"tround":106,"LEN":107,"tlen":108,"TRUNCATES":109,"TYPEOF":110,"ttypeof":111,"suma":112,"resta":113,"division":114,"mood":115,"diferente":116,"menor":117,"mayor":118,"menorigual":119,"mayorigual":120,"y":121,"o":122,"no":123,"id":124,"decimal":125,"entero":126,"fecha":127,"cadena":128,"ttrue":129,"tfalse":130,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"puntocoma",18:"tdeclare",23:"coma",24:"tdefault",25:"tinteger",26:"tboolean",27:"tdate",28:"tdouble",29:"tvarchar",31:"tset",32:"igual",33:"tcreate",34:"ttable",35:"idt",36:"parena",37:"parenc",40:"talter",41:"tadd",42:"tdrop",43:"tcolumn",44:"trename",45:"tto",46:"tinsert",47:"tinto",49:"tvalues",51:"tselect",53:"tfrom",54:"tas",55:"twhere",57:"multi",58:"tupdate",61:"ttruncate",62:"tdelete",63:"tbegin",65:"tend",78:"tif",79:"tthen",80:"telse",81:"tcase",84:"twhen",85:"twhile",86:"tfor",87:"tin",88:"punto",89:"tbreak",90:"tcontinue",91:"tfunction",93:"treturns",95:"tcast",97:"treturn",98:"tmetodo",100:"tprint",102:"tlower",104:"tupper",106:"tround",108:"tlen",111:"ttypeof",112:"suma",113:"resta",114:"division",115:"mood",116:"diferente",117:"menor",118:"mayor",119:"menorigual",120:"mayorigual",121:"y",122:"o",123:"no",124:"id",125:"decimal",126:"entero",127:"fecha",128:"cadena",129:"ttrue",130:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[17,3],[19,2],[19,1],[20,3],[20,2],[20,4],[22,1],[22,1],[22,1],[22,1],[22,1],[30,5],[7,7],[38,2],[38,1],[39,3],[39,2],[8,7],[8,7],[8,7],[8,9],[9,4],[10,11],[48,2],[48,1],[50,2],[50,1],[50,2],[50,1],[11,5],[11,7],[11,7],[11,9],[11,3],[11,5],[52,2],[52,1],[56,2],[56,1],[56,1],[12,7],[59,2],[59,1],[60,2],[60,1],[13,4],[14,6],[15,4],[64,2],[64,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,2],[67,7],[67,9],[68,5],[68,4],[82,2],[82,1],[83,4],[83,2],[69,6],[70,11],[71,2],[72,2],[74,12],[94,6],[92,3],[92,1],[96,2],[73,3],[75,9],[75,8],[76,5],[76,4],[99,4],[99,3],[77,3],[101,4],[103,4],[105,6],[107,4],[109,6],[110,4],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        
            let raiz = new Nodo("RAIZ", _$[$0-1].first_line, _$[$0-1].first_column,'"#86bafd"');
            raiz.hijos.push($$[$0-1]);
            return raiz;
    
break;
case 2:

                    
                    this.$ = $$[$0-1]
                    this.$.hijos.push($$[$0])

            
break;
case 3:


                this.$ =new Nodo("SENTENCIAS", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                this.$.hijos.push($$[$0])
            
break;
case 4:

            this.$ =new Nodo("SENTENCIA", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                this.$.hijos.push($$[$0])
        
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:

                this.$ =new Nodo("SENTENCIA", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                this.$.hijos.push($$[$0])
        
break;
case 13: case 85:

                lista.add("Sint√°ctico", "Token Inesperado " + $$[$0-1] , _$[$0-1].first_line, _$[$0-1].first_column);
        
break;
case 14:
this.$ =new Nodo ("DECLARACIONES", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-1])
break;
case 15:
 
                        this.$=$$[$0-1];
                        this.$.hijos.push($$[$0]);
                    
break;
case 16:
 this.$ = new Nodo("IDS", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0]) 
break;
case 17:
this.$ = new Nodo ("DECLARACION", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
break;
case 18:
this.$ =new Nodo ("DECLARACION", _$[$0-1].first_line, _$[$0-1].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-1])
break;
case 19:
this.$ =new Nodo ("DECLARACION", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-3])

                                this.$.hijos.push($$[$0])
break;
case 20:
this.$ = new Nodo("TIPO INT", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
break;
case 21:
this.$ = new Nodo("TIPO BOOLEAN", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
break;
case 22:
this.$ = new Nodo("TIPO DATE", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
break;
case 23:
this.$ = new Nodo("TIPO DOUBLE", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
break;
case 24:
this.$ = new Nodo("TIPO VARCHAR", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
break;
case 25:
this.$ =new Nodo("ASIGNAR V", _$[$0-4].first_line, _$[$0-4].first_column,'"#86bafd"');
                                        this.$.hijos.push($$[$0-3])
                                        this.$.hijos.push($$[$0-1])
break;
case 26:
this.$ =new Nodo("CREATE TABLE", _$[$0-6].first_line, _$[$0-6].first_column,'"#86bafd"');
                                                                this.$.hijos.push($$[$0-2])
break;
case 27:
this.$ = $$[$0-1]; 
                                $$[$0-1].push($$[$0]);
break;
case 28: case 38: case 50: case 56:
this.$ = [$$[$0]];
break;
case 29:
this.$ = INSTRUCCION.columna($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 30:
this.$ = INSTRUCCION.columna($$[$0-1], $$[$0], this._$.first_line, this._$.first_column );
break;
case 31: case 32: case 33:
this.$ =new Nodo("ALTERTABLE", _$[$0-6].first_line, _$[$0-6].first_column,'"#86bafd"');
break;
case 34:
this.$ =new Nodo("ALTERTABLE", _$[$0-8].first_line, _$[$0-8].first_column,'"#86bafd"');
break;
case 35:
this.$ =new Nodo("DROPTABLE", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
break;
case 36:
this.$ =new Nodo("INSERTTABLE", _$[$0-10].first_line, _$[$0-10].first_column,'"#86bafd"');
break;
case 37:
 
                            $$[$0-1].push($$[$0]);
                            this.$ = $$[$0-1]; 
                            
break;
case 39: case 41: case 51: case 57:
this.$ = $$[$0-1];
break;
case 40: case 42: case 52: case 53: case 58:
this.$ = $$[$0];
break;
case 43:
this.$ =new Nodo("SELECT TABLE", _$[$0-4].first_line, _$[$0-4].first_column,'"#86bafd"');
break;
case 44:
this.$ =new Nodo("SELECT TABLE", _$[$0-6].first_line, _$[$0-6].first_column,'"#86bafd"');
break;
case 45:
this.$ =new Nodo("SELECT TABLE", _$[$0-6].first_line, _$[$0-6].first_column,'"#86bafd"');
                                                            this.$.hijos.push($$[$0-1])
break;
case 46:
this.$ =new Nodo("SELECT TABLE", _$[$0-8].first_line, _$[$0-8].first_column,'"#86bafd"');
                                                            this.$.hijos.push($$[$0-1])
break;
case 47:
this.$ =new Nodo("SELECT TABLE", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                                            this.$.hijos.push($$[$0-1])
break;
case 48:
this.$ =new Nodo("SELECT TABLE", _$[$0-4].first_line, _$[$0-4].first_column,'"#86bafd"');
                                                            this.$.hijos.push($$[$0-3])
break;
case 49:

                            $$[$0-1].push($$[$0]);
                            this.$ = $$[$0-1];
                            
break;
case 54:
this.$ =new Nodo("UPDATE TABLE", _$[$0-6].first_line, _$[$0-6].first_column,'"#86bafd"');
break;
case 55:

                            $$[$0-1].push($$[$0]);
                            this.$ = $$[$0-1]; 
                            
break;
case 59:
this.$ =new Nodo("TRUNCATE TABLE", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
break;
case 60:
this.$ =new Nodo("DELETE TABLE", _$[$0-5].first_line, _$[$0-5].first_column,'"#86bafd"');
break;
case 61:
this.$ =new Nodo("BEGINEND", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
                                                this.$.hijos.push($$[$0-2])
break;
case 62: case 90:

                            this.$ = $$[$0-1];
                            this.$.hijos.push($$[$0]);
                            
break;
case 63:
this.$ = new Nodo("INSTRUCCIONES", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0])
break;
case 64:

            this.$ =new Nodo("INSTRUCCION", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                    this.$.hijos.push($$[$0])

        
break;
case 65:

             this.$ =new Nodo("INSTRUCCION", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
               this.$.hijos.push($$[$0])  
          
        
break;
case 66: case 84:

            this.$ =new Nodo("INSTRUCCION", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
             this.$.hijos.push($$[$0])
        
break;
case 67: case 68: case 69: case 70: case 74: case 83:

             this.$ =new Nodo("INSTRUCCION", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
             this.$.hijos.push($$[$0])
        
break;
case 71: case 80: case 81:

              this.$ = new Nodo("INSTRUCCION", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
             this.$.hijos.push($$[$0])
        
break;
case 72:

            this.$ = new Nodo("INSTRUCCION", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
             this.$.hijos.push($$[$0])
        
break;
case 73:

             this.$ = new Nodo("INSTRUCCION", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
             this.$.hijos.push($$[$0])
        
break;
case 75:

              this.$ =  new Nodo("INSTRUCCION", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
             this.$.hijos.push($$[$0])
        
break;
case 76: case 77: case 78:

            this.$ =  new Nodo("INSTRUCCION", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
             this.$.hijos.push($$[$0])
        
break;
case 79: case 82:

             this.$ =  new Nodo("INSTRUCCION", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
             this.$.hijos.push($$[$0])
        
break;
case 86:
this.$ = new Nodo("IF", _$[$0-6].first_line, _$[$0-6].first_column,'"#86bafd"');
                                                                            this.$.hijos.push($$[$0-3])
break;
case 87:
this.$ = new Nodo("IF", _$[$0-8].first_line, _$[$0-8].first_column,'"#86bafd"');
                                                                            this.$.hijos.push($$[$0-5])
                                                                            this.$.hijos.push($$[$0-3])
break;
case 88:
this.$ = new Nodo("CASE", _$[$0-4].first_line, _$[$0-4].first_column,'"#86bafd"');
                                                        this.$.hijos.push($$[$0-2])
break;
case 89:
this.$ = new Nodo("CASE", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
                                                        this.$.hijos.push($$[$0-2])
break;
case 91:
this.$= new Nodo("INSTRUCCION CASE", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0])
break;
case 92:
this.$ = new Nodo("Comparacion", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0])
break;
case 93:
this.$ = new Nodo("Else", _$[$0-1].first_line, _$[$0-1].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0])
break;
case 94:
this.$ =new Nodo("WHILE", _$[$0-5].first_line, _$[$0-5].first_column,'"#86bafd"');
                                                                            this.$.hijos.push($$[$0-2])
break;
case 95:
this.$ =new Nodo("FOR", _$[$0-10].first_line, _$[$0-10].first_column,'"#86bafd"');
                                                                            this.$.hijos.push($$[$0-2])
break;
case 96:
this.$= new Nodo("BREAK", _$[$0-1].first_line, _$[$0-1].first_column,'"#86bafd"');
break;
case 97:
this.$= new Nodo("CONTINUE", _$[$0-1].first_line, _$[$0-1].first_column,'"#86bafd"');
break;
case 98:
this.$ = new Nodo("FUNCION", _$[$0-11].first_line, _$[$0-11].first_column,'"#86bafd"');
                                                                                                            this.$.hijos.push($$[$0-7])
                                                                                                            this.$.hijos.push($$[$0-2])
break;
case 99:
this.$ = new Nodo("CAST", _$[$0-5].first_line, _$[$0-5].first_column,'"#86bafd"');
                                        this.$.hijos.push($$[$0-3])
                                        this.$.hijos.push($$[$0-1])
break;
case 100:

                            this.$ = $$[$0-2];
                            this.$.hijos.push($$[$0]);
                            
break;
case 101:
this.$ = new Nodo("PARAMETROS", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                           
                            this.$.hijos.push($$[$0])
                                
break;
case 102:
this.$ = new Nodo("PARAMETRO", _$[$0-1].first_line, _$[$0-1].first_column,'"#86bafd"');
                       this.$.hijos.push($$[$0])
                       this.$.hijos.push($$[$0-1])
                       
break;
case 103:
this.$ = new Nodo("RETURN", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                 this.$.hijos.push($$[$0-1])
break;
case 104:
this.$ = new Nodo("METODO", _$[$0-8].first_line, _$[$0-8].first_column,'"#86bafd"');
                                                                                 this.$.hijos.push($$[$0-5])
                                                                                this.$.hijos.push($$[$0-2])
break;
case 105:
this.$ = new Nodo("METODO", _$[$0-7].first_line, _$[$0-7].first_column,'"#86bafd"');
                                                                                 this.$.hijos.push($$[$0-2])
break;
case 106:
this.$ = new Nodo("LLAMADA", _$[$0-4].first_line, _$[$0-4].first_column,'"#86bafd"');
break;
case 107: case 108:
this.$ = new Nodo("LLAMADA", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
break;
case 109:
this.$ = new Nodo("LLAMADA", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
break;
case 110:
this.$ = new Nodo("PRINT", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-1])
break;
case 111:
this.$ = new Nodo("LOWEL", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-1])
break;
case 112:
this.$ = new Nodo("UPPER", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-1])
break;
case 113:
this.$ = new Nodo("ROUND", _$[$0-5].first_line, _$[$0-5].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-3])
                                this.$.hijos.push($$[$0-1])
break;
case 114:
this.$ = new Nodo("LEN", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-1])
break;
case 115:
this.$ = new Nodo("TRUNCATE", _$[$0-5].first_line, _$[$0-5].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-3])
                                this.$.hijos.push($$[$0-1])
break;
case 116:
this.$ = new Nodo("TYPEOF", _$[$0-3].first_line, _$[$0-3].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-1])
break;
case 117:
this.$ = new Nodo("+", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0])  
break;
case 118:
this.$ = new Nodo("-", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0])     
break;
case 119:
this.$ = new Nodo("*", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0]) 
break;
case 120:
this.$ = new Nodo("/", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0])    
break;
case 121:
this.$ = new Nodo("%", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0])
break;
case 122:
this.$ = new Nodo("negativo", _$[$0-1].first_line, _$[$0-1].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0])  
break;
case 123:
this.$ = new Nodo("(E)", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-1]) 
break;
case 124:
this.$ = new Nodo("=", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0])   
break;
case 125:
this.$ != new Nodo("!=", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0]) 
break;
case 126:
this.$ = new Nodo("<", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0])  
break;
case 127:
this.$ = new Nodo(">", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0]) 
break;
case 128:
this.$ = new Nodo("<=", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0])     
break;
case 129:
this.$ = new Nodo(">=", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0])   
break;
case 130:
this.$ = new Nodo("AND", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0])      
break;
case 131:
this.$ = new Nodo("OR", _$[$0-2].first_line, _$[$0-2].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-2])
                                this.$.hijos.push($$[$0]) 
break;
case 132:
  this.$ = new Nodo("NOT", _$[$0-1].first_line, _$[$0-1].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0-1])        
break;
case 133: case 134: case 135: case 136: case 137: case 138:
this.$ = new Nodo($$[$0], _$[$0].first_line, _$[$0].first_column,'"#86bafd"');  
break;
case 139: case 140:
this.$ = new Nodo($$[$0], _$[$0].first_line, _$[$0].first_column,'"#86bafd"'); 
break;
case 141: case 142: case 143: case 144:
this.$ = new Nodo("EXP", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0]) 
break;
case 145: case 147: case 148:
 this.$ = new Nodo("EXP", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                                this.$.hijos.push($$[$0]) 
break;
case 146:
 this.$ = new Nodo("EXP", _$[$0].first_line, _$[$0].first_column,'"#86bafd"');
                                 this.$.hijos.push($$[$0]) 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,33:$V1,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,63:$V9},{1:[3]},{2:$V0,5:[1,23],6:24,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,33:$V1,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,63:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),{16:[1,25]},{34:$Vb},{34:[1,27]},{34:[1,28]},{47:[1,29]},{21:31,35:[1,43],36:$Vc,52:30,56:32,57:$Vd,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{35:[1,60]},{34:[1,61]},{53:[1,62]},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,64:63,66:64,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},{1:[2,1]},o($Va,[2,2]),o($Va,[2,13]),{35:[1,99]},{35:[1,100]},{35:[1,101]},{35:[1,102]},{35:$VH,53:[1,103],54:[1,104],56:105,57:$Vd},{16:[1,107],32:$VI,54:[1,108],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},o($VV,[2,50]),{21:122,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:124,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:125,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VX,[2,133]),o($VX,[2,134]),o($VX,[2,135]),o($VX,[2,136]),o($VX,[2,137]),o($VX,[2,138]),o($VX,[2,139]),o([16,32,35,53,54,57,112,113,114,115,116,117,118,119,120,121,122],$VY,{23:$VZ,36:$V_}),o($VX,[2,141]),o($VX,[2,142]),o($VX,[2,143]),o($VX,[2,144]),o($VX,[2,145]),o($VX,[2,146]),o($VX,[2,147]),o($VX,[2,148]),o($VV,[2,53]),{36:[1,128]},{36:[1,129]},{36:[1,130]},{36:[1,131]},{36:[1,132]},{36:[1,133]},{36:[1,134]},{31:[1,135]},{35:[1,136]},{35:[1,137]},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,65:[1,138],66:139,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},o($V$,[2,63]),o($V$,[2,64]),o($V$,[2,65]),o($V$,[2,66]),o($V$,[2,67]),o($V$,[2,68]),o($V$,[2,69]),o($V$,[2,70]),o($V$,[2,71]),o($V$,[2,72]),o($V$,[2,73]),o($V$,[2,74]),o($V$,[2,75]),o($V$,[2,76]),o($V$,[2,77]),o($V$,[2,78]),o($V$,[2,79]),o($V$,[2,80]),o($V$,[2,81]),o($V$,[2,82]),o($V$,[2,83]),o($V$,[2,84]),{16:[1,140]},{19:141,20:142,21:143,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:144,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{34:$Vb,91:[1,145],98:[1,146]},{21:147,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:148,35:$VW,36:$Vc,61:$Ve,80:$V01,82:149,83:150,84:$V11,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:153,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:154,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:[1,155]},{16:[1,156]},{21:157,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{36:[1,158]},{21:159,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{36:[1,160]},{41:[1,161],42:[1,162],44:[1,163]},{16:[1,164]},{36:[1,165]},{35:[1,166]},{35:$VH,52:167,56:32,57:$Vd},o($VV,[2,49]),o($VV,[2,52],{23:$VZ}),o($V21,[2,47]),{35:[1,168]},{21:169,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:170,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:171,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:172,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:173,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:174,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:175,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:176,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:177,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:178,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:179,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:180,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:181,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VX,[2,122]),o([16,23,25,26,27,28,29,32,35,37,54,55,57,61,63,65,79,80,84,87,88,95,102,104,106,108,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130],$VY,{36:$V_}),{32:$VI,37:[1,182],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},o([16,23,25,26,27,28,29,35,36,37,54,55,61,63,65,79,80,84,87,88,95,102,104,106,108,111,121,122,123,124,125,126,127,128,129,130],[2,132],{32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS}),o($VV,[2,51]),{21:186,35:$VW,36:$Vc,37:[1,184],59:183,60:185,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:187,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:188,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:189,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:190,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:191,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:192,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:193,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:186,35:$VW,36:$Vc,59:194,60:185,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:[1,195]},{55:[1,196]},{16:[1,197]},o($V$,[2,62]),o($V$,[2,85]),{16:[1,198],20:199,21:143,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($V31,[2,16]),{22:200,25:$V41,26:$V51,27:$V61,28:$V71,29:$V81,32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{32:[1,206],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{35:[1,207]},{35:[1,208]},{32:$VI,57:$VJ,79:[1,209],112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{32:$VI,57:$VJ,80:$V01,82:210,83:150,84:$V11,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{65:[1,211],80:$V01,83:212,84:$V11},o($V91,[2,91]),{21:213,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{21:214,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{32:$VI,57:$VJ,63:[1,215],112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{32:$VI,57:$VJ,87:[1,216],112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},o($V$,[2,96]),o($V$,[2,97]),{16:[1,217],32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{21:186,35:$VW,36:$Vc,37:[1,219],59:218,60:185,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:[1,220],32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{19:221,20:142,21:143,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{35:[1,222]},{43:[1,223]},{43:[1,225],45:[1,224]},o($V21,[2,35]),{21:229,35:$Va1,36:$Vc,48:226,50:227,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:[1,230],55:[1,231]},{35:$VH,53:[1,232],56:105,57:$Vd},{16:[1,233]},o($Vb1,[2,117],{57:$VJ,114:$VM,115:$VN}),o($Vb1,[2,118],{57:$VJ,114:$VM,115:$VN}),o($VX,[2,119]),o($VX,[2,120]),o($VX,[2,121]),o($Vc1,$Vd1,{57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,117:$VP,118:$VQ,119:$VR,120:$VS}),o($Vc1,[2,125],{57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,117:$VP,118:$VQ,119:$VR,120:$VS}),o($Ve1,[2,126],{57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN}),o($Ve1,[2,127],{57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN}),o($Ve1,[2,128],{57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN}),o($Ve1,[2,129],{57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN}),o([16,23,25,26,27,28,29,35,36,37,54,55,61,63,65,79,80,84,87,88,95,102,104,106,108,111,122,123,124,125,126,127,128,129,130],[2,130],{32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT}),o([16,23,25,26,27,28,29,35,36,37,54,55,61,63,65,79,80,84,87,88,95,102,104,106,108,111,123,124,125,126,127,128,129,130],[2,131],{32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU}),o($VX,[2,123]),{21:186,35:$VW,36:$Vc,37:[1,234],60:235,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VX,[2,109]),o($Vf1,[2,56]),o([35,36,37,55,61,95,102,104,106,108,111,123,124,125,126,127,128,129,130],[2,58],{23:[1,236],32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU}),{32:$VI,37:[1,237],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{32:$VI,37:[1,238],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{23:[1,239],32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{32:$VI,37:[1,240],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{23:[1,241],32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{32:$VI,37:[1,242],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{32:$VI,54:[1,243],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{21:186,35:$VW,36:$Vc,55:[1,244],60:235,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($V21,[2,59]),{21:245,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($Va,[2,61]),o($V$,[2,14]),o($V31,[2,15]),o($V31,[2,18],{23:[1,246],24:[1,247]}),o($Vg1,[2,20]),o($Vg1,[2,21]),o($Vg1,[2,22]),o($Vg1,[2,23]),o($Vg1,[2,24]),{21:248,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{36:[1,249]},{21:253,35:$VW,36:$Vc,54:[1,251],61:$Ve,92:250,94:51,95:$Vf,96:252,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,64:254,66:64,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},{65:[1,255],80:$V01,83:212,84:$V11},{16:[1,256]},o($V91,[2,90]),{32:$VI,57:$VJ,79:[1,257],112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},o($V91,[2,93],{32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU}),{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,64:258,66:64,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},{21:259,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($V$,[2,103]),{21:186,35:$VW,36:$Vc,37:[1,260],60:235,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:[1,261]},o($V$,[2,110]),{20:199,21:143,35:$VW,36:$Vc,37:[1,262],61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{22:263,25:$V41,26:$V51,27:$V61,28:$V71,29:$V81},{35:[1,264]},{35:[1,265]},{35:[1,266]},{21:229,35:$Va1,36:$Vc,37:[1,267],50:268,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($Vh1,[2,38]),o([32,35,37,57,61,95,102,104,106,108,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130],[2,40],{23:[1,269],36:$V_}),o([35,36,37,61,95,102,104,106,108,111,123,124,125,126,127,128,129,130],[2,42],{23:[1,270],32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU}),o($V21,[2,43]),{21:271,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{35:[1,272]},o($V21,[2,48]),o($VX,[2,108]),o($Vf1,[2,55]),o($Vf1,[2,57]),o($VX,[2,111]),o($VX,[2,112]),{21:273,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VX,[2,114]),{21:274,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VX,[2,116]),{22:275,25:$V41,26:$V51,27:$V61,28:$V71,29:$V81},{21:276,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:[1,277],32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},o($V31,[2,17]),{21:278,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o([32,116,121,122],$Vd1,{16:[1,279],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,117:$VP,118:$VQ,119:$VR,120:$VS}),{21:253,35:$VW,36:$Vc,61:$Ve,92:280,94:51,95:$Vf,96:252,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{23:$Vi1,54:[1,281]},{63:[1,283]},o($Vj1,[2,101]),{22:284,25:$V41,26:$V51,27:$V61,28:$V71,29:$V81,32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,65:[1,285],66:139,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,80:[1,286],81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},{16:[1,287]},o($V$,[2,89]),{21:288,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,65:[1,289],66:139,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},{32:$VI,57:$VJ,88:[1,290],112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{16:[1,291]},o($V$,[2,107]),{16:[1,292]},{16:[1,293]},{16:[1,294]},{16:[1,295]},{45:[1,296]},{49:[1,297]},o($Vh1,[2,37]),o($Vh1,[2,39]),o($Vh1,[2,41]),{16:[1,298],32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{16:[1,299],55:[1,300]},{32:$VI,37:[1,301],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{32:$VI,37:[1,302],57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{37:[1,303]},{16:[1,304],32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},o($V21,[2,60]),o([16,35,36,37,61,95,102,104,106,108,111,123,124,125,126,127,128,129,130],[2,19],{32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU}),o($V$,[2,25]),{23:$Vi1,37:[1,305]},{63:[1,306]},{21:253,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,96:307,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,64:308,66:64,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},o($Vj1,[2,102]),{78:[1,309]},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,64:310,66:64,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},o($V$,[2,88]),o($V91,[2,92],{32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU}),{16:[1,311]},{88:[1,312]},o($V$,[2,106]),o($V21,[2,26]),o($V21,[2,31]),o($V21,[2,32]),o($V21,[2,33]),{35:[1,313]},{36:[1,314]},o($V21,[2,45]),o($V21,[2,44]),{21:315,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VX,[2,113]),o($VX,[2,115]),o($VX,[2,99]),o($V21,[2,54]),{93:[1,316]},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,64:317,66:64,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},o($Vj1,[2,100]),{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,65:[1,318],66:139,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},{16:[1,319]},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,65:[1,320],66:139,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},o($V$,[2,94]),{21:321,35:$VW,36:$Vc,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:[1,322]},{21:229,35:$Va1,36:$Vc,48:323,50:227,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:[1,324],32:$VI,57:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},{22:325,25:$V41,26:$V51,27:$V61,28:$V71,29:$V81},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,65:[1,326],66:139,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},{16:[1,327]},o($V$,[2,86]),{78:[1,328]},{32:$VI,57:$VJ,63:[1,329],112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT,122:$VU},o($V21,[2,34]),{21:229,35:$Va1,36:$Vc,37:[1,330],50:268,61:$Ve,94:51,95:$Vf,99:50,101:44,102:$Vg,103:45,104:$Vh,105:46,106:$Vi,107:47,108:$Vj,109:48,110:49,111:$Vk,113:$Vl,123:$Vm,124:$Vn,125:$Vo,126:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($V21,[2,46]),{63:[1,331]},{16:[1,332]},o($V$,[2,105]),{16:[1,333]},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,64:334,66:64,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},{16:[1,335]},{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,64:336,66:64,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},o($V$,[2,104]),o($V$,[2,87]),{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,65:[1,337],66:139,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},o($V21,[2,36]),{2:$Vu,7:67,8:68,9:69,10:70,11:71,12:72,13:73,14:74,17:65,18:$Vv,30:66,31:$Vw,33:$Vx,35:$Vy,40:$V2,42:$V3,46:$V4,51:$V5,58:$V6,61:$V7,62:$V8,65:[1,338],66:139,67:75,68:76,69:77,70:78,71:79,72:80,73:81,74:82,75:83,76:84,77:85,78:$Vz,81:$VA,85:$VB,86:$VC,89:$VD,90:$VE,97:$VF,100:$VG},{16:[1,339]},{16:[1,340]},o($V$,[2,95]),o($V$,[2,98])],
defaultActions: {23:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  
    const TIPO_DATO = require('../Tipos/TipoDato');   
    const INSTRUCCION = require('../Instrucciones/Instruccion');
    const TIPO_OPERACION = require('../Tipos/TipoOperacion');
    const TIPO_VALOR = require('../Tipos/TipoValor');
    const ListaErrores = require('../Errores/ListaErrores');
    const ListaSimbolos = require('../Simbolos/ListaSimbolos');

   
    var lista = new ListaErrores();
    var simbolos = new ListaSimbolos();
    
    const Nodo = require('./Nodo.js');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Espacios se ignoran */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 129;     
break;
case 5:   return 122;         
break;
case 6:   return 121;         
break;
case 7:   return 123;        
break;
case 8:   return 130;    
break;
case 9:   return 25;  
break;
case 10:   return 26;  
break;
case 11:   return 28;   
break;
case 12:   return 29;  
break;
case 13:   return 27;     
break;
case 14:   return 18;  
break;
case 15:   return 24;  
break;
case 16:   return 31;      
break;
case 17:   return 33;   
break;
case 18:   return 34;    
break;
case 19:   return 40;    
break;
case 20:   return 41;      
break;
case 21:   return 42;     
break;
case 22:   return 43;   
break;
case 23:   return 44;   
break;
case 24:   return 45;       
break;
case 25:   return 46;   
break;
case 26:   return 47;     
break;
case 27:   return 49;   
break;
case 28:   return 51;   
break;
case 29:   return 53;     
break;
case 30:   return 55;    
break;
case 31:   return 54;       
break;
case 32:   return 58;   
break;
case 33:   return 61; 
break;
case 34:   return 62;   
break;
case 35:   return 95;     
break;
case 36:   return 63;    
break;
case 37:   return 65;      
break;
case 38:   return 78;       
break;
case 39:   return 80;     
break;
case 40:   return 79;     
break;
case 41:   return 81;     
break;
case 42:   return 84;     
break;
case 43:   return 85;    
break;
case 44:   return 86;      
break;
case 45:   return 87;       
break;
case 46:   return 89;    
break;
case 47:   return 90; 
break;
case 48:   return 91; 
break;
case 49:   return 97;   
break;
case 50:   return 93;  
break;
case 51:   return 98;
break;
case 52:   return 100;
break;
case 53:   return 102;
break;
case 54:   return 104;
break;
case 55:   return 106;
break;
case 56:   return 108;
break;
case 57:   return 111;
break;
case 58:return 124;
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 128; 
break;
case 60:return 127;
break;
case 61:return 125;
break;
case 62:return 126;
break;
case 63:return 35;
break;
case 64:return 112;
break;
case 65:return 113;
break;
case 66:return 57;
break;
case 67:return 114;
break;
case 68:return 115;
break;
case 69:return 36;
break;
case 70:return 37;
break;
case 71:return 88;
break;
case 72:return 32;
break;
case 73:return 23;
break;
case 74:return 'dospuntos';
break;
case 75:return 16;
break;
case 76:return 116;
break;
case 77:return 119;
break;
case 78:return 120;
break;
case 79:return 118;
break;
case 80:return 117;
break;
case 81:
                                lista.add("L√©xico", "Caracter Inesperado: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column ) ;

                            
break;
}
},
rules: [/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:[-][-].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:not\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:varchar\b)/i,/^(?:date\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:select\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:as\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:then\b)/i,/^(?:case\b)/i,/^(?:when\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:returns\b)/i,/^(?:procedure\b)/i,/^(?:print\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:[@]([a-zA-Z√ë√±]|(_[a-zA-Z√ë√±]))([a-zA-Z√ë√±]|[0-9]|_)*)/i,/^(?:"(?:[{cor1}|{cor2}]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:([0-9][0-9][0-9][0-9])([-])([0-1][0-9])([-])([0-9][0-9]))/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z√ë√±]|(_[a-zA-Z√ë√±]))([a-zA-Z√ë√±]|[0-9]|_)*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = arbol;
exports.Parser = arbol.Parser;
exports.parse = function () { return arbol.parse.apply(arbol, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}