/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[2,5,34,41,43,47,52,59,62,63,64],$Vb=[1,26],$Vc=[1,36],$Vd=[1,34],$Ve=[1,51],$Vf=[1,56],$Vg=[1,52],$Vh=[1,53],$Vi=[1,54],$Vj=[1,55],$Vk=[1,57],$Vl=[1,33],$Vm=[1,35],$Vn=[1,37],$Vo=[1,38],$Vp=[1,39],$Vq=[1,40],$Vr=[1,41],$Vs=[1,42],$Vt=[1,85],$Vu=[1,86],$Vv=[1,87],$Vw=[1,88],$Vx=[1,96],$Vy=[1,89],$Vz=[1,90],$VA=[1,91],$VB=[1,92],$VC=[1,93],$VD=[1,94],$VE=[1,95],$VF=[1,97],$VG=[1,105],$VH=[1,113],$VI=[1,110],$VJ=[1,108],$VK=[1,109],$VL=[1,111],$VM=[1,112],$VN=[1,114],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[1,118],$VS=[1,119],$VT=[1,120],$VU=[36,54,55,58],$VV=[1,122],$VW=[16,21,23,33,36,37,39,55,56,58,62,64,66,80,81,85,88,89,101,103,105,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],$VX=[2,139],$VY=[1,125],$VZ=[1,126],$V_=[2,18,32,34,36,41,43,47,52,59,62,63,64,66,79,81,82,86,87,90,91,96,99],$V$=[1,141],$V01=[1,149],$V11=[2,5,18,32,34,36,41,43,47,52,59,62,63,64,66,79,81,82,86,87,90,91,96,99],$V21=[16,21],$V31=[1,197],$V41=[1,198],$V51=[1,199],$V61=[1,200],$V71=[1,201],$V81=[81,85],$V91=[1,218],$Va1=[1,225],$Vb1=[16,21,23,33,36,37,39,55,56,62,64,66,80,81,85,88,89,101,103,105,107,110,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128],$Vc1=[16,21,23,33,36,37,39,55,56,62,64,66,80,81,85,88,89,101,103,105,107,110,115,120,121,122,123,124,125,126,127,128],$Vd1=[16,21,23,33,36,37,39,55,56,62,64,66,80,81,85,88,89,101,103,105,107,110,115,116,117,118,119,120,121,122,123,124,125,126,127,128],$Ve1=[21,36,37,39,56,62,101,103,105,107,110,112,122,123,124,125,126,127,128],$Vf1=[16,21,23,24,36,39,55,64],$Vg1=[1,249],$Vh1=[36,39],$Vi1=[21,36,37,39,62,101,103,105,107,110,112,122,123,124,125,126,127,128],$Vj1=[1,279],$Vk1=[23,39,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"CREATETABLE":7,"ALTERTABLE":8,"DROPTABLE":9,"INSERT":10,"SELECT":11,"UPDATE":12,"TRUNCATE":13,"DELETE":14,"BEGINEND":15,"puntocoma":16,"DVARIABLES":17,"tdeclare":18,"LIDS":19,"IDS":20,"id":21,"TIPO":22,"coma":23,"tdefault":24,"EXP":25,"tinteger":26,"tboolean":27,"tdate":28,"tdouble":29,"tvarchar":30,"ASIGNARV":31,"tset":32,"igual":33,"tcreate":34,"ttable":35,"idt":36,"parena":37,"LCOLUMNAS":38,"parenc":39,"COLUMNAS":40,"talter":41,"tadd":42,"tdrop":43,"tcolumn":44,"trename":45,"tto":46,"tinsert":47,"tinto":48,"LCOLUM":49,"tvalues":50,"IDINSERT":51,"tselect":52,"LID":53,"tfrom":54,"tas":55,"twhere":56,"SCOL":57,"multi":58,"tupdate":59,"LUPDATE":60,"SUPDATE":61,"ttruncate":62,"tdelete":63,"tbegin":64,"INSTRUCCIONES":65,"tend":66,"INSTRUCCION":67,"IF":68,"CASE":69,"WHILE":70,"FOR":71,"BREAK":72,"CONTINUE":73,"RETURN":74,"FUNCION":75,"METODO":76,"LLAMADA":77,"PRINT":78,"tif":79,"tthen":80,"telse":81,"tcase":82,"INSTRUCASE":83,"INTCASE":84,"twhen":85,"twhile":86,"tfor":87,"tin":88,"punto":89,"tbreak":90,"tcontinue":91,"tfunction":92,"PARAMETOS":93,"treturns":94,"PARAMETRO":95,"treturn":96,"tmetodo":97,"LLAMADAS":98,"tprint":99,"LOWER":100,"tlower":101,"UPPER":102,"tupper":103,"ROUND":104,"tround":105,"LEN":106,"tlen":107,"TRUNCATES":108,"TYPEOF":109,"ttypeof":110,"suma":111,"resta":112,"division":113,"mood":114,"diferente":115,"menor":116,"mayor":117,"menorigual":118,"mayorigual":119,"y":120,"o":121,"no":122,"decimal":123,"entero":124,"fecha":125,"cadena":126,"ttrue":127,"tfalse":128,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"puntocoma",18:"tdeclare",21:"id",23:"coma",24:"tdefault",26:"tinteger",27:"tboolean",28:"tdate",29:"tdouble",30:"tvarchar",32:"tset",33:"igual",34:"tcreate",35:"ttable",36:"idt",37:"parena",39:"parenc",41:"talter",42:"tadd",43:"tdrop",44:"tcolumn",45:"trename",46:"tto",47:"tinsert",48:"tinto",50:"tvalues",52:"tselect",54:"tfrom",55:"tas",56:"twhere",58:"multi",59:"tupdate",62:"ttruncate",63:"tdelete",64:"tbegin",66:"tend",79:"tif",80:"tthen",81:"telse",82:"tcase",85:"twhen",86:"twhile",87:"tfor",88:"tin",89:"punto",90:"tbreak",91:"tcontinue",92:"tfunction",94:"treturns",96:"treturn",97:"tmetodo",99:"tprint",101:"tlower",103:"tupper",105:"tround",107:"tlen",110:"ttypeof",111:"suma",112:"resta",113:"division",114:"mood",115:"diferente",116:"menor",117:"mayor",118:"menorigual",119:"mayorigual",120:"y",121:"o",122:"no",123:"decimal",124:"entero",125:"fecha",126:"cadena",127:"ttrue",128:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[17,3],[19,2],[19,1],[20,3],[20,2],[20,4],[22,1],[22,1],[22,1],[22,1],[22,1],[31,5],[7,7],[38,2],[38,1],[40,3],[40,2],[8,7],[8,7],[8,7],[8,9],[9,4],[10,11],[49,2],[49,1],[51,2],[51,1],[51,2],[51,1],[11,5],[11,7],[11,7],[11,9],[11,3],[11,5],[53,2],[53,1],[57,2],[57,1],[57,1],[12,7],[60,2],[60,1],[61,2],[61,1],[13,4],[14,6],[15,4],[65,2],[65,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,2],[68,7],[68,9],[69,7],[69,6],[83,2],[83,1],[84,4],[70,6],[71,11],[72,2],[73,2],[75,12],[93,3],[93,1],[95,2],[74,3],[76,9],[76,8],[77,5],[77,4],[98,4],[98,3],[78,3],[100,4],[102,4],[104,6],[106,4],[108,6],[109,4],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

         //Objeto de Salida
            var salida = {
                lerrores: lista,
                instrucciones: $$[$0-1],
                lsimbolos: simbolos,
            }
            
            lista = new ListaErrores();
            simbolos = new ListaSimbolos();
            return salida;
    
break;
case 2:

                //Insertar a la lista de instrucciones
                $$[$0-1].push($$[$0]); 
                //Retornar la lista de instrucciones
                this.$=$$[$0-1]
            
break;
case 3:

                this.$ = [$$[$0]];
            
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85:

                this.$ = $$[$0];
        
break;
case 13: case 86:

                lista.add("Sint√°ctico", "Token Inesperado " + $$[$0-1] , _$[$0-1].first_line, _$[$0-1].first_column);
        
break;
case 14:
this.$ = INSTRUCCION.declarev($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 15:
 
                        $$[$0-1].push($$[$0]); 
                        this.$=$$[$0-1];
                    
break;
case 16:
 this.$ = [$$[$0]]; 
break;
case 17:
this.$= INSTRUCCION.declararv($$[$0-1], $$[$0-2], null, this._$.first_line, this._$.first_column );
break;
case 18:
this.$= INSTRUCCION.declararv($$[$0], $$[$0-1], null, this._$.first_line, this._$.first_column );
break;
case 19:
this.$= INSTRUCCION.declararv($$[$0-2], $$[$0-3], $$[$0], this._$.first_line, this._$.first_column );
break;
case 20:
this.$ = TIPO_DATO.INT;
break;
case 21:
this.$ = TIPO_DATO.BOOLEAN;
break;
case 22:
this.$ = TIPO_DATO.DATE;
break;
case 23:
this.$ = TIPO_DATO.DOUBLE;
break;
case 24:
this.$ = TIPO_DATO.VARCHAR;
break;
case 25:
this.$ = INSTRUCCION.asignarv($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 26:
this.$ = INSTRUCCION.createt($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column );
break;
case 27:
this.$ = $$[$0-1]; 
                                $$[$0-1].push($$[$0]);
break;
case 28: case 38: case 50: case 56: case 63: case 92: case 100:
this.$ = [$$[$0]];
break;
case 29:
this.$ = INSTRUCCION.columna($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 30:
this.$ = INSTRUCCION.columna($$[$0-1], $$[$0], this._$.first_line, this._$.first_column );
break;
case 31:
this.$ = INSTRUCCION.agregarc($$[$0-4], $$[$0-2],$$[$0-1], this._$.first_line, this._$.first_column );
break;
case 32:
this.$ = INSTRUCCION.eliminarc($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 33:
this.$ = INSTRUCCION.renamet($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 34:
this.$ = INSTRUCCION.renamec($$[$0-6], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 35:
this.$ = INSTRUCCION.dropt($$[$0-1], this._$.first_line, this._$.first_column );
break;
case 36:
this.$ = INSTRUCCION.insert($$[$0-8], $$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column );
break;
case 37:
 
                            $$[$0-1].push($$[$0]);
                            this.$ = $$[$0-1]; 
                            
break;
case 39: case 41: case 51: case 57:
this.$ = $$[$0-1];
break;
case 40: case 42: case 52: case 53: case 58: case 140: case 141: case 142: case 143: case 144: case 145: case 146:
this.$ = $$[$0];
break;
case 43:
this.$ = INSTRUCCION.selects($$[$0-3], null ,$$[$0-1],null, this._$.first_line, this._$.first_column );
break;
case 44:
this.$ = INSTRUCCION.selects($$[$0-5],$$[$0-3], $$[$0-1], null, this._$.first_line, this._$.first_column );
break;
case 45:
this.$ = INSTRUCCION.selects($$[$0-5],null, $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 46:
this.$ = INSTRUCCION.selects($$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 47:
this.$ = INSTRUCCION.selectva($$[$0-1], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 48:
this.$ = INSTRUCCION.selectva($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 49: case 62:

                            $$[$0-1].push($$[$0]);
                            this.$ = $$[$0-1];
                            
break;
case 54:
this.$ = INSTRUCCION.update($$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column );         
break;
case 55: case 91:

                            $$[$0-1].push($$[$0]);
                            this.$ = $$[$0-1]; 
                            
break;
case 59:
this.$ = INSTRUCCION.truncate($$[$0-1], this._$.first_line, this._$.first_column );
break;
case 60:
this.$ = INSTRUCCION.delete($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 61:
this.$ = INSTRUCCION.beginend($$[$0-2], this._$.first_line, this._$.first_column );
break;
case 87:
this.$ = INSTRUCCION.si($$[$0-5], $$[$0-3],null, this._$.first_line, this._$.first_column );
break;
case 88:
this.$ = INSTRUCCION.si($$[$0-7], $$[$0-5], $$[$0-3], this._$.first_line, this._$.first_column );
break;
case 89:
this.$ = INSTRUCCION.caso($$[$0-5], $$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column );
break;
case 90:
this.$ = INSTRUCCION.caso(null, $$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column );
break;
case 93:
this.$ = INSTRUCCION.cuando($$[$0-2], $$[$0], this._$.first_line, this._$.first_column );
break;
case 94:
this.$ = INSTRUCCION.mientras($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column );
break;
case 95:
this.$ = INSTRUCCION.para($$[$0-9], $$[$0-7], $$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column );
break;
case 96:
this.$ = INSTRUCCION.break(this._$.first_line, this._$.first_column );
break;
case 97:
this.$ = INSTRUCCION.continue(this._$.first_line, this._$.first_column );
break;
case 98:
this.$ = INSTRUCCION.funcion($$[$0-9], $$[$0-7], $$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column );
break;
case 99:

                            $$[$0-2].push($$[$0]);
                            this.$ = $$[$0-2];
                            
break;
case 101:
this.$ = INSTRUCCION.parametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column );
break;
case 102:
this.$ = INSTRUCCION.devolver($$[$0-1], this._$.first_line, this._$.first_column );
break;
case 103:
this.$ = INSTRUCCION.metodo($$[$0-6], $$[$0-5], $$[$0-2], this._$.first_line, this._$.first_column );
break;
case 104:
this.$ = INSTRUCCION.metodo($$[$0-5], null, $$[$0-2], this._$.first_line, this._$.first_column );
break;
case 105:
this.$ = INSTRUCCION.llamada($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column );
break;
case 106:
this.$ = INSTRUCCION.llamada($$[$0-3], null, this._$.first_line, this._$.first_column );
break;
case 107:
this.$ = INSTRUCCION.llamadas($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 108:
this.$ = INSTRUCCION.llamadas($$[$0-2], null, this._$.first_line, this._$.first_column );
break;
case 109:
this.$ = INSTRUCCION.print($$[$0-1], this._$.first_line, this._$.first_column );
break;
case 110:
this.$ = INSTRUCCION.lower($$[$0-1], this._$.first_line, this._$.first_column );
break;
case 111:
this.$ = INSTRUCCION.upper($$[$0-1], this._$.first_line, this._$.first_column );
break;
case 112:
this.$ = INSTRUCCION.round($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 113:
this.$ = INSTRUCCION.len($$[$0-1], this._$.first_line, this._$.first_column );
break;
case 114:
this.$ = INSTRUCCION.truncates($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column );
break;
case 115:
this.$ = INSTRUCCION.typeof($$[$0-1], this._$.first_line, this._$.first_column );
break;
case 116:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column);           
break;
case 117:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column);          
break;
case 118:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column); 
break;
case 119:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column);       
break;
case 120:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MODULO, this._$.first_line, this._$.first_column);         
break;
case 121:
this.$ = INSTRUCCION.operacion($$[$0],null, TIPO_OPERACION.NEGATIVO, this._$.first_line, this._$.first_column);     
break;
case 122:
this.$ = $$[$0-1];                                                                                                    
break;
case 123:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.IGUAL, this._$.first_line, this._$.first_column);          
break;
case 124:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE, this._$.first_line, this._$.first_column);      
break;
case 125:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MENOR, this._$.first_line, this._$.first_column);          
break;
case 126:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR, this._$.first_line, this._$.first_column);          
break;
case 127:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL, this._$.first_line, this._$.first_column);     
break;
case 128:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL, this._$.first_line, this._$.first_column);     
break;
case 129:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column);            
break;
case 130:
this.$ = INSTRUCCION.operacion($$[$0-2],$$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column);             
break;
case 131:
this.$ = INSTRUCCION.operacion($$[$0],null, TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column);            
break;
case 132:
this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column);         
break;
case 133:
this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.DOUBLE, this._$.first_line, this._$.first_column);                
break;
case 134:
this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.INT, this._$.first_line, this._$.first_column);                   
break;
case 135:
this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.DATE, this._$.first_line, this._$.first_column);                  
break;
case 136:
this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.VARCHAR, this._$.first_line, this._$.first_column);               
break;
case 137: case 138:
this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.BOOLEAN, this._$.first_line, this._$.first_column);               
break;
case 139:
this.$ = INSTRUCCION.valor($$[$0], TIPO_VALOR.IDCOLUM, this._$.first_line, this._$.first_column);                    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,34:$V1,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9},{1:[3]},{2:$V0,5:[1,23],6:24,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,34:$V1,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),{16:[1,25]},{35:$Vb},{35:[1,27]},{35:[1,28]},{48:[1,29]},{21:$Vc,25:31,36:[1,43],37:$Vd,53:30,57:32,58:$Ve,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{36:[1,58]},{35:[1,59]},{54:[1,60]},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,65:61,67:62,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{1:[2,1]},o($Va,[2,2]),o($Va,[2,13]),{36:[1,98]},{36:[1,99]},{36:[1,100]},{36:[1,101]},{36:$VG,54:[1,102],55:[1,103],57:104,58:$Ve},{16:[1,106],33:$VH,55:[1,107],58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},o($VU,[2,50]),{21:$Vc,25:121,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:123,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:124,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($VW,[2,132]),o($VW,[2,133]),o($VW,[2,134]),o($VW,[2,135]),o($VW,[2,136]),o($VW,[2,137]),o($VW,[2,138]),o([16,33,36,54,55,58,111,112,113,114,115,116,117,118,119,120,121],$VX,{23:$VY,37:$VZ}),o($VW,[2,140]),o($VW,[2,141]),o($VW,[2,142]),o($VW,[2,143]),o($VW,[2,144]),o($VW,[2,145]),o($VW,[2,146]),o($VU,[2,53]),{37:[1,127]},{37:[1,128]},{37:[1,129]},{37:[1,130]},{37:[1,131]},{37:[1,132]},{32:[1,133]},{36:[1,134]},{36:[1,135]},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,66:[1,136],67:137,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},o($V_,[2,63]),o($V_,[2,64]),o($V_,[2,65]),o($V_,[2,66]),o($V_,[2,67]),o($V_,[2,68]),o($V_,[2,69]),o($V_,[2,70]),o($V_,[2,71]),o($V_,[2,72]),o($V_,[2,73]),o($V_,[2,74]),o($V_,[2,75]),o($V_,[2,76]),o($V_,[2,77]),o($V_,[2,78]),o($V_,[2,79]),o($V_,[2,80]),o($V_,[2,81]),o($V_,[2,82]),o($V_,[2,83]),o($V_,[2,84]),o($V_,[2,85]),{16:[1,138]},{19:139,20:140,21:$V$},{21:[1,142]},{35:$Vb,92:[1,143],97:[1,144]},{21:$Vc,25:145,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{36:[1,146],83:147,84:148,85:$V01},{21:$Vc,25:150,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:151,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{16:[1,152]},{16:[1,153]},{21:$Vc,25:154,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{37:[1,155]},{21:$Vc,25:156,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{37:[1,157]},{42:[1,158],43:[1,159],45:[1,160]},{16:[1,161]},{37:[1,162]},{36:[1,163]},{36:$VG,53:164,57:32,58:$Ve},o($VU,[2,49]),o($VU,[2,52],{23:$VY}),o($V11,[2,47]),{36:[1,165]},{21:$Vc,25:166,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:167,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:168,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:169,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:170,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:171,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:172,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:173,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:174,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:175,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:176,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:177,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:178,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($VW,[2,121]),o([16,21,23,33,36,39,55,56,58,62,64,66,80,81,85,88,89,101,103,105,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],$VX,{37:$VZ}),{33:$VH,39:[1,179],58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},o([16,21,23,36,37,39,55,56,62,64,66,80,81,85,88,89,101,103,105,107,110,120,121,122,123,124,125,126,127,128],[2,131],{33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR}),o($VU,[2,51]),{21:$Vc,25:183,36:$VV,37:$Vd,39:[1,181],60:180,61:182,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:184,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:185,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:186,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:187,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:188,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:189,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{21:$Vc,25:183,36:$VV,37:$Vd,60:190,61:182,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{16:[1,191]},{56:[1,192]},{16:[1,193]},o($V_,[2,62]),o($V_,[2,86]),{16:[1,194],20:195,21:$V$},o($V21,[2,16]),{22:196,26:$V31,27:$V41,28:$V51,29:$V61,30:$V71},{33:[1,202]},{36:[1,203]},{36:[1,204]},{33:$VH,58:$VI,80:[1,205],111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{83:206,84:148,85:$V01},{81:[1,207],84:208,85:$V01},o($V81,[2,92]),{21:$Vc,25:209,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{33:$VH,58:$VI,64:[1,210],111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{33:$VH,58:$VI,88:[1,211],111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},o($V_,[2,96]),o($V_,[2,97]),{16:[1,212],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{21:$Vc,25:183,36:$VV,37:$Vd,39:[1,214],60:213,61:182,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{16:[1,215],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{36:$V91,38:216,40:217},{36:[1,219]},{44:[1,220]},{44:[1,222],46:[1,221]},o($V11,[2,35]),{21:$Vc,25:226,36:$Va1,37:$Vd,49:223,51:224,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{16:[1,227],56:[1,228]},{36:$VG,54:[1,229],57:104,58:$Ve},{16:[1,230]},o($Vb1,[2,116],{58:$VI,113:$VL,114:$VM}),o($Vb1,[2,117],{58:$VI,113:$VL,114:$VM}),o($VW,[2,118]),o($VW,[2,119]),o($VW,[2,120]),o($Vc1,[2,123],{58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,116:$VO,117:$VP,118:$VQ,119:$VR}),o($Vc1,[2,124],{58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,116:$VO,117:$VP,118:$VQ,119:$VR}),o($Vd1,[2,125],{58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM}),o($Vd1,[2,126],{58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM}),o($Vd1,[2,127],{58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM}),o($Vd1,[2,128],{58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM}),o([16,21,23,36,37,39,55,56,62,64,66,80,81,85,88,89,101,103,105,107,110,121,122,123,124,125,126,127,128],[2,129],{33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS}),o([16,21,23,36,37,39,55,56,62,64,66,80,81,85,88,89,101,103,105,107,110,122,123,124,125,126,127,128],[2,130],{33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT}),o($VW,[2,122]),{21:$Vc,25:183,36:$VV,37:$Vd,39:[1,231],61:232,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($VW,[2,108]),o($Ve1,[2,56]),o([21,36,37,39,56,62,101,103,105,107,110,122,123,124,125,126,127,128],[2,58],{23:[1,233],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT}),{33:$VH,39:[1,234],58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{33:$VH,39:[1,235],58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{23:[1,236],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{33:$VH,39:[1,237],58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{23:[1,238],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{33:$VH,39:[1,239],58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{21:$Vc,25:183,36:$VV,37:$Vd,56:[1,240],61:232,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($V11,[2,59]),{21:$Vc,25:241,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($V11,[2,61]),o($V_,[2,14]),o($V21,[2,15]),o($V21,[2,18],{23:[1,242],24:[1,243]}),o($Vf1,[2,20]),o($Vf1,[2,21]),o($Vf1,[2,22]),o($Vf1,[2,23]),o($Vf1,[2,24]),{21:$Vc,25:244,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{37:[1,245]},{21:$Vg1,55:[1,247],93:246,95:248},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,65:250,67:62,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{81:[1,251],84:208,85:$V01},{21:$Vc,25:252,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($V81,[2,91]),{33:$VH,58:$VI,80:[1,253],111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,65:254,67:62,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{21:$Vc,25:255,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($V_,[2,102]),{21:$Vc,25:183,36:$VV,37:$Vd,39:[1,256],61:232,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{16:[1,257]},o($V_,[2,109]),{36:$V91,39:[1,258],40:259},o($Vh1,[2,28]),{22:260,26:$V31,27:$V41,28:$V51,29:$V61,30:$V71},{22:261,26:$V31,27:$V41,28:$V51,29:$V61,30:$V71},{36:[1,262]},{36:[1,263]},{36:[1,264]},{21:$Vc,25:226,36:$Va1,37:$Vd,39:[1,265],51:266,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($Vi1,[2,38]),o([21,33,36,39,58,62,101,103,105,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],[2,40],{23:[1,267],37:$VZ}),o([21,36,37,39,62,101,103,105,107,110,122,123,124,125,126,127,128],[2,42],{23:[1,268],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT}),o($V11,[2,43]),{21:$Vc,25:269,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{36:[1,270]},o($V11,[2,48]),o($VW,[2,107]),o($Ve1,[2,55]),o($Ve1,[2,57]),o($VW,[2,110]),o($VW,[2,111]),{21:$Vc,25:271,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($VW,[2,113]),{21:$Vc,25:272,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($VW,[2,115]),{21:$Vc,25:273,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{16:[1,274],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},o($V21,[2,17]),{21:$Vc,25:275,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{16:[1,276],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{21:$Vg1,93:277,95:248},{23:$Vj1,55:[1,278]},{64:[1,280]},o($Vk1,[2,100]),{22:281,26:$V31,27:$V41,28:$V51,29:$V61,30:$V71},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,66:[1,282],67:137,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,81:[1,283],82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{21:$Vc,25:284,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{33:$VH,58:$VI,66:[1,285],111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{21:$Vc,25:286,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,66:[1,287],67:137,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{33:$VH,58:$VI,89:[1,288],111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{16:[1,289]},o($V_,[2,106]),{16:[1,290]},o($Vh1,[2,27]),o($Vh1,[2,30],{23:[1,291]}),{16:[1,292]},{16:[1,293]},{16:[1,294]},{46:[1,295]},{50:[1,296]},o($Vi1,[2,37]),o($Vi1,[2,39]),o($Vi1,[2,41]),{16:[1,297],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{16:[1,298],56:[1,299]},{33:$VH,39:[1,300],58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{33:$VH,39:[1,301],58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{16:[1,302],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},o($V11,[2,60]),o($V21,[2,19],{33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT}),o($V_,[2,25]),{23:$Vj1,39:[1,303]},{64:[1,304]},{21:$Vg1,95:305},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,65:306,67:62,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},o($Vk1,[2,101]),{79:[1,307]},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,65:308,67:62,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{33:$VH,58:$VI,66:[1,309],111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{16:[1,310]},o($V81,[2,93],{33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT}),{16:[1,311]},{89:[1,312]},o($V_,[2,105]),o($V11,[2,26]),o($Vh1,[2,29]),o($V11,[2,31]),o($V11,[2,32]),o($V11,[2,33]),{36:[1,313]},{37:[1,314]},o($V11,[2,45]),o($V11,[2,44]),{21:$Vc,25:315,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($VW,[2,112]),o($VW,[2,114]),o($V11,[2,54]),{94:[1,316]},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,65:317,67:62,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},o($Vk1,[2,99]),{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,66:[1,318],67:137,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{16:[1,319]},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,66:[1,320],67:137,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{16:[1,321]},o($V_,[2,90]),o($V_,[2,94]),{21:$Vc,25:322,36:$VV,37:$Vd,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{16:[1,323]},{21:$Vc,25:226,36:$Va1,37:$Vd,49:324,51:224,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},{16:[1,325],33:$VH,58:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},{22:326,26:$V31,27:$V41,28:$V51,29:$V61,30:$V71},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,66:[1,327],67:137,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{16:[1,328]},o($V_,[2,87]),{79:[1,329]},o($V_,[2,89]),{33:$VH,58:$VI,64:[1,330],111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR,120:$VS,121:$VT},o($V11,[2,34]),{21:$Vc,25:226,36:$Va1,37:$Vd,39:[1,331],51:266,62:$Vf,98:50,100:44,101:$Vg,102:45,103:$Vh,104:46,105:$Vi,106:47,107:$Vj,108:48,109:49,110:$Vk,112:$Vl,122:$Vm,123:$Vn,124:$Vo,125:$Vp,126:$Vq,127:$Vr,128:$Vs},o($V11,[2,46]),{64:[1,332]},{16:[1,333]},o($V_,[2,104]),{16:[1,334]},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,65:335,67:62,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{16:[1,336]},{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,65:337,67:62,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},o($V_,[2,103]),o($V_,[2,88]),{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,66:[1,338],67:137,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},o($V11,[2,36]),{2:$Vt,7:65,8:66,9:67,10:68,11:69,12:70,13:71,14:72,15:84,17:63,18:$Vu,31:64,32:$Vv,34:$Vw,36:$Vx,41:$V2,43:$V3,47:$V4,52:$V5,59:$V6,62:$V7,63:$V8,64:$V9,66:[1,339],67:137,68:73,69:74,70:75,71:76,72:77,73:78,74:79,75:80,76:81,77:82,78:83,79:$Vy,82:$Vz,86:$VA,87:$VB,90:$VC,91:$VD,96:$VE,99:$VF},{16:[1,340]},{16:[1,341]},o($V_,[2,95]),o($V_,[2,98])],
defaultActions: {23:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //? Imports

    const TIPO_DATO = require('../Tipos/TipoDato');   
    const INSTRUCCION = require('../Instrucciones/Instruccion');
    const TIPO_OPERACION = require('../Tipos/TipoOperacion');
    const TIPO_VALOR = require('../Tipos/TipoValor');
    const ListaErrores = require('../Errores/ListaErrores');
    const ListaSimbolos = require('../Simbolos/ListaSimbolos');

    //? Instructions
    var simbolos = new ListaSimbolos();
    var lista = new ListaErrores();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Espacios se ignoran */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 127;     
break;
case 5:   return 121;         
break;
case 6:   return 120;         
break;
case 7:   return 122;        
break;
case 8:   return 128;    
break;
case 9:   return 26;  
break;
case 10:   return 27;  
break;
case 11:   return 29;   
break;
case 12:   return 30;  
break;
case 13:   return 28;     
break;
case 14:   return 18;  
break;
case 15:   return 24;  
break;
case 16:   return 32;      
break;
case 17:   return 34;   
break;
case 18:   return 35;    
break;
case 19:   return 41;    
break;
case 20:   return 42;      
break;
case 21:   return 43;     
break;
case 22:   return 44;   
break;
case 23:   return 45;   
break;
case 24:   return 46;       
break;
case 25:   return 47;   
break;
case 26:   return 48;     
break;
case 27:   return 50;   
break;
case 28:   return 52;   
break;
case 29:   return 54;     
break;
case 30:   return 56;    
break;
case 31:   return 55;       
break;
case 32:   return 59;   
break;
case 33:   return 62; 
break;
case 34:   return 63;   
break;
case 35:   return 'tcast';     
break;
case 36:   return 64;    
break;
case 37:   return 66;      
break;
case 38:   return 79;       
break;
case 39:   return 81;     
break;
case 40:   return 80;     
break;
case 41:   return 82;     
break;
case 42:   return 85;     
break;
case 43:   return 86;    
break;
case 44:   return 87;      
break;
case 45:   return 88;       
break;
case 46:   return 90;    
break;
case 47:   return 91; 
break;
case 48:   return 92; 
break;
case 49:   return 96;   
break;
case 50:   return 94;  
break;
case 51:   return 97;
break;
case 52:   return 99;
break;
case 53:   return 101;
break;
case 54:   return 103;
break;
case 55:   return 105;
break;
case 56:   return 107;
break;
case 57:   return 110;
break;
case 58:return 21;
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 126; 
break;
case 60:return 125;
break;
case 61:return 123;
break;
case 62:return 124;
break;
case 63:return 36;
break;
case 64:return 111;
break;
case 65:return 112;
break;
case 66:return 58;
break;
case 67:return 113;
break;
case 68:return 114;
break;
case 69:return 37;
break;
case 70:return 39;
break;
case 71:return 89;
break;
case 72:return 33;
break;
case 73:return 23;
break;
case 74:return 'dospuntos';
break;
case 75:return 16;
break;
case 76:return 115;
break;
case 77:return 118;
break;
case 78:return 119;
break;
case 79:return 117;
break;
case 80:return 116;
break;
case 81:
                                lista.add("L√©xico", "Caracter Inesperado: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column ) ;

                            
break;
}
},
rules: [/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:[-][-].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:not\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:varchar\b)/i,/^(?:date\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:select\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:as\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:then\b)/i,/^(?:case\b)/i,/^(?:when\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:returns\b)/i,/^(?:procedure\b)/i,/^(?:print\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:[@]([a-zA-Z√ë√±]|(_[a-zA-Z√ë√±]))([a-zA-Z√ë√±]|[0-9]|_)*)/i,/^(?:([\"][^\n\"]+[\"])|([\'][^\n\']+[\']))/i,/^(?:([0-9][0-9][0-9][0-9])([-])([0-1][0-9])([-])([0-9][0-9]))/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z√ë√±]|(_[a-zA-Z√ë√±]))([a-zA-Z√ë√±]|[0-9]|_)*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}